group 'ricardo.teste.gradle'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile project('child-module-2')
    compile project('child-module-3')
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task myTask(group: 'greeting', description: 'Greets you.') {

    doFirst {
        println 'called doFirst'
    }

    doLast {
        println 'called doLast'
    }
}

myTask { println 'Should appear after Configure Project' }

jar {
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest{
        attributes(
                "Main-Class": "ricardo.gradle.test.main.Application",
        )
    }
}

import java.util.concurrent.TimeUnit
// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult buildResult) {

    }
}

gradle.addListener new TimingsListener()



task execute(type: Exec, dependsOn: jar) {
    executable 'java'
    args "-jar", jar.archivePath.absolutePath
}

task measure(type: Exec, dependsOn: jar) {
    executable 'java'
    args "-jar", jar.archivePath.absolutePath
}